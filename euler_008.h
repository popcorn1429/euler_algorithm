#pragma once
/*
题目：
找出以下这个 1000 位的整数中连续 13 个数字的最大乘积。

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*/

#include "basic_headers.h"

using count = size_t;
using pos = size_t;
using multiplied = size_t;

void split_by_zero(const string& full_number, list<string>& segments) {
    pos start_pos = 0;
    pos end_pos = full_number.find('0', start_pos);

    while (string::npos != end_pos) {
        segments.push_back(full_number.substr(start_pos, end_pos - start_pos));
        start_pos = end_pos;
        while ('0' == full_number[start_pos]) ++start_pos;

        end_pos = full_number.find('0', start_pos);
    }

    segments.push_back(full_number.substr(start_pos));
}

multiplied get_max_multiply(const string& segment) {
    if (segment.size() < 13) return 0;

    multiplied m = 1;
    for (pos i = 0; i < 13; ++i) {
        m *= (segment[i] - '0');
    }

    multiplied max = m;
    for (pos i = 1; i + 13 <= segment.size(); ++ i) {
        m /= (segment[i-1] - '0');
        m *= (segment[i+12] - '0');
        if (max < m) max = m;
    }
    return max;
}

void resolution() {
    //与其说这个1000位的数字是个巨大的数字，不如将其当作一个1000个digit字符的字符串。
    //反正目的是其中的连续13个字符，按照13个个位数相乘算出结果
    //既然要尽可能算出乘积最大的值，显然这连续的13个字符不能出现'0'
    
    //所以完整的1000个字符的大字符串，其实把字符'0'看作截断区，可以分成数个小串，小串都不包含'0'
    //如果小串的长度不足13，那就失去了参与比较的资格。
    //小串长度达到13或更长的，则均可以参与计算

    string full_number{"73167176531330624919225119674426574742355349194934"
                        "96983520312774506326239578318016984801869478851843"
                        "85861560789112949495459501737958331952853208805511"
                        "12540698747158523863050715693290963295227443043557"
                        "66896648950445244523161731856403098711121722383113"
                        "62229893423380308135336276614282806444486645238749"
                        "30358907296290491560440772390713810515859307960866"
                        "70172427121883998797908792274921901699720888093776"
                        "65727333001053367881220235421809751254540594752243"
                        "52584907711670556013604839586446706324415722155397"
                        "53697817977846174064955149290862569321978468622482"
                        "83972241375657056057490261407972968652414535100474"
                        "82166370484403199890008895243450658541227588666881"
                        "16427171479924442928230863465674813919123162824586"
                        "17866458359124566529476545682848912883142607690042"
                        "24219022671055626321111109370544217506941658960408"
                        "07198403850962455444362981230987879927244284909188"
                        "84580156166097919133875499200524063689912560717606"
                        "05886116467109405077541002256983155200055935729725"
                        "71636269561882670428252483600823257530420752963450"};
    list<string> segments{};
    split_by_zero(full_number, segments);

    multiplied result = 0;
    for (const auto& segment : segments) {
        multiplied mul = get_max_multiply(segment);
        if (result < mul) result = mul;
    }
    
    cout << "result is " << result << endl;
}
